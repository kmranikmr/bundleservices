
import digdag
import os
import psycopg2
import pandas as pd
import numpy as np
from pandas import DataFrame
from numpy import repeat
from psycopg2.extras import RealDictCursor
from sqlalchemy import MetaData
from sqlalchemy import create_engine
from sqlalchemy import event
import pickle
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, StandardScaler, MinMaxScaler, PolynomialFeatures
from keras.models import model_from_json
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.layers import Bidirectional, LSTM
from keras.utils import to_categorical
import sklearn
from io import BytesIO
import dill,base64,tempfile
from joblib import load
from sklearn.svm import LinearSVC, SVC
import datetime


def run_id():
    if 'sessionIds' in  digdag.env.params:
        sessiondIdvalue = digdag.env.params["sessionIds"]
    else:
        sessiondIdvalue = ""

    if not sessiondIdvalue:
       return ""
    else:
       str = sessiondIdvalue.replace(',','_')
       return str
    return ""



def remove_temp_db(delete_query):
    con = psycopg2.connect(database="digdagdb", user="ubuntu", password="password", host="172.17.0.1", port="5432")
    print("Database opened successfully")
    cur = con.cursor()
    cur.execute(delete_query)

def do_transformation(df, model_df):
    process_df = process_custom_code(df, model_df)
    if isinstance(process_df, pd.DataFrame):
       print("regular")
       print(process_df.head())
       currentTime = datetime.datetime.now()
       if not process_df.empty:
          process_df.to_csv("data_{}_{}.csv".format('[PROJECT_PATH]',currentTime.strftime("%Y%m%d%H%M%S")))
   


def input_postgres(input_table, model_df):
    input_query = "select * from "+input_table
    con = psycopg2.connect(database="digdagdb", user="ubuntu", password="password", host="172.17.0.1", port="5432")
    print("Database opened successfully")
    with con.cursor(name='custom_cursor', cursor_factory=RealDictCursor) as cursor:
        cursor.execute(input_query)
        while True:
            col_names = []
            records = cursor.fetchmany(size=500000)
            col_set = False
            if not col_set:
                for elt in cursor.description:
                    col_names.append(elt[0])
            if not records:
                break
            col_set = True
            df = DataFrame(records)
            df.columns = col_names
            do_transformation(df, model_df)
            #insert_data_postgres(df, 'output11', 'public')
        cursor.close()  # don't forget to cleanup
    con.close()





def input_postgres_complete(input_table):
    input_query = "select * from "+input_table
    con = psycopg2.connect(database="digdagdb", user="ubuntu", password="password", host="172.17.0.1", port="5432")
    print("Database opened successfully")
    with con.cursor(name='custom_cursor', cursor_factory=RealDictCursor) as cursor:
        cursor.execute(input_query)
        while True:
            col_names = []
            records = cursor.fetchmany(size=1000)
            col_set = False
            if not col_set:
                for elt in cursor.description:
                    col_names.append(elt[0])
            if not records:
                break
            col_set = True
            df = DataFrame(records)
            df.columns = col_names
            return df
            #insert_data_postgres(df, 'output11', 'public')
        cursor.close()  # don't forget to cleanup
    con.close()

[COMMANDBODY]
def [METHODNAME]():
    model_df = {}
    [POSTGRES_ARTIFACT_READ]
    outstr = "[INPUTNODENAME]_[INPUTNODEID]{}".format(run_id())
    input_df = input_postgres(outstr,model_df)
    [DELETE_TEMP]
    print("done all")

if __name__ == "__main__":
    [METHODNAME]()

